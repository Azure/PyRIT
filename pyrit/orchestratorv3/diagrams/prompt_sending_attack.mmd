sequenceDiagram
    participant Client
    participant Factory as SingleTurnOrchestratorFactory
    participant Builder as PromptSendingOrchestratorBuilder
    participant AttackBuilder as PromptSendingAttackBuilder
    participant Strategy as PromptSendingAttackStrategy
    participant Target as PromptTarget
    participant PromptUtils
    participant ConvManager as ConversationManager
    
    Client->>Factory: create(target, PROMPT_SENDING)
    Factory-->>Builder: new PromptSendingOrchestratorBuilder()
    Factory-->>Client: return builder
    
    Client->>Builder: with_batch_size(2)
    Client->>Builder: attack()
    Builder-->>AttackBuilder: new PromptSendingAttackBuilder(context)
    Builder-->>Client: return attackBuilder
    
    Client->>AttackBuilder: with_prompts(["prompt1", "prompt2"])
    Client->>AttackBuilder: execute()
    
    AttackBuilder->>Strategy: new PromptSendingAttackStrategy(...)
    AttackBuilder->>Strategy: setup(context)
    AttackBuilder->>Strategy: execute(context)
    
    Strategy->>Strategy: _get_prompt_requests(context)
    Strategy->>PromptUtils: build_normalizer_requests(prompts, ...)
    PromptUtils-->>Strategy: normalizer_requests
    
    alt Has prepended conversation
        Strategy->>Strategy: _prepare_conversation(normalizer_request)
        Strategy->>ConvManager: initialize_conversation_with_history()
    end
    
    Strategy->>Target: send_prompt_batch_to_target_async(requests)
    Target-->>Strategy: responses
    
    alt Has scorers
        Strategy->>Strategy: _score_responses(responses, context) 
    end
    
    Strategy-->>AttackBuilder: return SingleTurnAttackResult
    AttackBuilder-->>Client: return result
    
    Client->>Client: result.print_conversations()