from pyrit.prompt_target import PromptTarget
from pyrit.prompt_converter import PromptConverter
from pyrit.models import PromptTemplate, ChatMessage
import pathlib
from pyrit.common.path import DATASETS_PATH
import json

class VariationConverter(PromptConverter):
    def __init__(self, converter_target: PromptTarget = None, prompt_template: PromptTemplate = None):
        self.converter_target = converter_target #TODO: make a default, if not given
        self.prompt_template = prompt_template
        # set to default strategy if not provided
        self.prompt_template = (
            prompt_template
            if prompt_template
            else PromptTemplate.from_yaml_file(
                pathlib.Path(DATASETS_PATH)
                / "attack_strategies"
                / "prompt_variation"
                / "prompt_variation.yaml"
            )
        )
        

    def convert(self, prompts: list[str]) -> list[str]:
        """
        Generates variations of the input prompts using the converter target.
        Parameters: 
            prompts: list of prompts to convert
        Return: 
            target_responses: list of prompt variations generated by the converter target
        """
        target_responses = set() #Remove duplicate responses
        
        chat_entries = [ChatMessage(role="system", content=str(self.prompt_template))]
        self.converter_target.complete_chat(messages=chat_entries)
        for prompt in prompts:
            chat_entries.append(ChatMessage(role="user", content=prompt))
            response_msg = self.converter_target.complete_chat(messages=chat_entries)
            #response_msg = self.converter_target.complete_chat(messages=chat_entries, response_format="json_object")
            try: 
                response_dict = json.loads(response_msg)
                for key in response_dict:
                    target_responses.add(response_dict[key])
            except:
                print("could not parse response as JSON")
                print(response_msg)
                target_responses.add(response_msg)
        return list(target_responses)